module java/type/ClassifierDeclarations
imports
  java/member/Modifiers     %% Modifier
  java/Identifiers   %% Id
  java/type/Types         %% ClassifierType, TypeParam
  java/member/Members       %% Member, InitializerBlock, EnumConstants, AnnotationElementDecl
  
global actions
	pattern _ -> ClassifierDeclaration #
		$ = $0;
	#

exports
  sorts ClassDeclaration InterfaceDeclaration EnumDeclaration AnnotationDeclaration ClassifierDeclaration

  context-free syntax

    %% Classes
	@Symboltable{name2TypeParameter}
    rule #$ = ClassDefinition();#
		 (
			Modifier #HasTypeModifier($, $0);#
			| (Annotation #HasTypeAnnotation($, $0);#)
		 )* "class" Id #
			{qualifiedNamePrefix += "." + #lexem($2)#;}
			$.name = lexem($2);
			$.external = false;
			$.fullyQualifiedName = {return qualifiedNamePrefix;};
		 #
         ("<" {TypeParam #DeclaresClassTypeParameter($, $0);# ","}+ #{utilities.correctTypeParameterUsage((SymbolTableStack) #name2TypeParameter#, (Vertex) #$#);}# ">")?
         ("extends" ClassifierType #ExtendsClass($, $1);#)?
         ("implements" {ClassifierType #ImplementedInterfacesFromClass($, $0);# ","}+)?
         ClassifierBody #ContainsTypeMember($, $6);#
		 -> ClassDeclaration

    %% Enums
    rule (Modifier|Annotation)* "enum" Id
         ("implements" {ClassifierType ","}+)?
         EnumBody -> EnumDeclaration
    rule "{" EnumConstants (";"
             %% All kinds of Members except for EnumConstants may follow
             (FieldDeclaration |
              MethodDeclaration | ConstructorDeclaration |
              InitializerBlock |
              ClassifierDeclaration ";"*)*)? "}" -> EnumBody

    %% Interfaces
    rule (Modifier|Annotation)* "interface" Id
         ("<" {TypeParam ","}+ ">")?
         ("extends" {ClassifierType ","}+)?
         ClassifierBody -> InterfaceDeclaration

    %% Annotations
    rule (Modifier|Annotation)* "@" "interface" Id  AnnotationBody -> AnnotationDeclaration
    %% Yes, there may be enums in annotations
    rule "{" (AnnotationElementDecl | ClassifierDeclaration | FieldDeclaration ";"*)* "}" -> AnnotationBody

    rule ClassDeclaration      -> ClassifierDeclaration
    rule EnumDeclaration       -> ClassifierDeclaration
    rule InterfaceDeclaration  -> ClassifierDeclaration
    rule AnnotationDeclaration -> ClassifierDeclaration

    rule ClassifierDeclaration -> Member #$=$0;#

    rule "{" (Member | InitializerBlock ";"* #lift($0);#)* "}" -> ClassifierBody #$ = $1;#
