module java/type/Types

imports
  java/program/Packages          %% PackageName
  java/Identifiers       %% Id

global actions
	@Before
	pattern _(*) -> TypeArg #
		$isInSuperTypeDeclaration = {return isInSuperTypeDeclaration;};
		{isInSuperTypeDeclaration = false;}
	#

	pattern _(*) -> TypeArg #
		{isInSuperTypeDeclaration = (Boolean) #$isInSuperTypeDeclaration#;}
	#

exports
  sorts PrimType ArrayType ClassifierType TypeArg TypeParam PlainClassifierType
 
  context-free syntax

    %% Type
    rule PrimType       -> Type #$ = $0;#
    rule ArrayType      -> Type #$ = $0;#
    rule ClassifierType -> Type #$ = $0;#

    %% Primitive types
    rule "boolean"                        -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.BOOLEAN#);};#
    rule "int"                            -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.INT#);};#
    rule "long"                           -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.LONG#);};#
    rule "char"                           -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.CHAR#);};#
    rule "byte"                           -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.BYTE#);};#
    rule "short"                          -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.SHORT#);};#
    rule "float"                          -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.FLOAT#);};#
    rule "double"                         -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.DOUBLE#);};#
    rule "void"                           -> PrimType #$ = {return utilities.getBuiltInType(currentElement.getPosition(), #BuiltInTypes.VOID#);};#

    %% ArrayType
    rule PrimType        -> NonArrayType #$ = $0;#
    rule ClassifierType  -> NonArrayType #$ = $0;#
    rule NonArrayType
		#
			$result = $0;
			$dimension = 0;
		#
		(
			"[" "]" #
				$dimension = {return ((Integer) #$dimension#) + 1;};
				$arrayResult = ArrayType();
				$arrayResult.dimensions = $dimension;
				type.specification.HasElementType($arrayResult, $result);
				$result = $arrayResult;
			#
		)+
		-> ArrayType #
			$ = $result;
		#

    %% ClassifierType
    rule Id                             -> ClassifierType #%% This could be a simple name of a Classifier or a type parameter name.
		$typeParamDecl = name2TypeParameter.use(lexem($0));
		{
			if (#$typeParamDecl# == null) {#
				$ = QualifiedType();
				$.fullyQualifiedName = {return utilities.resolveQualifiedName(#lexem($0)#);};
				$identifier = name2Identifier.use(lexem($0));
				{
					if (#$identifier# == null) {#
						$identifier = Identifier();
						$identifier.name = lexem($0);
						name2Identifier.declare(lexem($0), $identifier);
					#} else {
						getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
					}
				}
				HasSimpleName($, $identifier);
				{
					if (!currentElement.getParentApplicationOfDefinedRule()
							.getParent().getParentApplicationOfDefinedRule()
							.getAppliedRule().getDefinedRepresentation().trim().startsWith("ClassifierType \".\" ClassifierType -> ClassifierType")) {
						// the QualifiedType is only linked, if it is not part of an EnclosedType
						if (isInSuperTypeDeclaration) {
							linker.addSuperTypeName((Vertex) #$#);
						} else {
							linker.addTypeName((Vertex) #$#);
						}
					}
				}
			#} else {#
				$ = TypeParameterUsage();
				IsDefinedByType($, $typeParamDecl);
			#}
		}
	#
    rule PackageName "." Id             -> ClassifierType #
		$ = QualifiedType();
		$.fullyQualifiedName = $0.concat(".").concat(lexem($2));
		$identifier = name2Identifier.use(lexem($2));
		{
			if (#$identifier# == null) {#
				$identifier = Identifier();
				$identifier.name = lexem($2);
				name2Identifier.declare(lexem($2), $identifier);
			#} else {
				getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(4).getPosition());
			}
		}
		HasSimpleName($, $identifier);
		{
			if (!currentElement.getParentApplicationOfDefinedRule()
					.getParent().getParentApplicationOfDefinedRule()
					.getAppliedRule().getDefinedRepresentation().trim().startsWith("ClassifierType \".\" ClassifierType -> ClassifierType")) {
				// the QualifiedType is only linked, if it is not part of an EnclosedType
				if (isInSuperTypeDeclaration) {
					linker.addSuperTypeName((Vertex) #$#);
				} else {
					linker.addTypeName((Vertex) #$#);
				}
			}
		}
	#
    rule Id #
			$ = QualifiedType();
			$.fullyQualifiedName ={return utilities.resolveQualifiedName(#lexem($0)#);};
			$identifier = name2Identifier.use(lexem($0));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($0);
					name2Identifier.declare(lexem($0), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
				}
			}
			HasSimpleName($, $identifier);
			{
				if (!currentElement.getParentApplicationOfDefinedRule()
						.getParent().getParentApplicationOfDefinedRule()
						.getAppliedRule().getDefinedRepresentation().trim().startsWith("ClassifierType \".\" ClassifierType -> ClassifierType")) {
					// the QualifiedType is only linked, if it is not part of an EnclosedType
					if (isInSuperTypeDeclaration) {
						linker.addSuperTypeName((Vertex) #$#);
					} else {
						linker.addTypeName((Vertex) #$#);
					}
				}
			}
		#
		"<" #$typeArg = TypeArgument();#
		{
			TypeArg #{
				if (((Vertex) #$0#).isInstanceOf(getVertexClass("type.specification.SimpleArgument"))) {#
					ContainsSimpleArgument($typeArg, $0);
				#} else {#
					ContainsWildcardArgument($typeArg, $0);
				#}
			}#
			","
		}+ #HasTypeArgument($, $typeArg);#
		">" -> ClassifierType
    rule PackageName "." Id #
			$ = QualifiedType();
			$.fullyQualifiedName = $0.concat(".").concat(lexem($2));
			$identifier = name2Identifier.use(lexem($2));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($2);
					name2Identifier.declare(lexem($2), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(4).getPosition());
				}
			}
			HasSimpleName($, $identifier);
			{
				if (!currentElement.getParentApplicationOfDefinedRule()
						.getParent().getParentApplicationOfDefinedRule()
						.getAppliedRule().getDefinedRepresentation().trim().startsWith("ClassifierType \".\" ClassifierType -> ClassifierType")) {
					// the QualifiedType is only linked, if it is not part of an EnclosedType
					if (isInSuperTypeDeclaration) {
						linker.addSuperTypeName((Vertex) #$#);
					} else {
						linker.addTypeName((Vertex) #$#);
					}
				}
			}
		#
		"<" #$typeArg = TypeArgument();#
		{
			TypeArg #{
				if (((Vertex) #$0#).isInstanceOf(getVertexClass("type.specification.SimpleArgument"))) {#
					ContainsSimpleArgument($typeArg, $0);
				#} else {#
					ContainsWildcardArgument($typeArg, $0);
				#}
			}#
			","
		}+ #HasTypeArgument($, $typeArg);#
		">" -> ClassifierType
    rule ClassifierType "." ClassifierType -> ClassifierType {left, avoid} #
		$ = EnclosedType();
		HasEnclosingType($, $0);
		HasEnclosedType($, $2);
		{
			if (!currentElement.getParentApplicationOfDefinedRule()
					.getParent().getParentApplicationOfDefinedRule()
					.getAppliedRule().getDefinedRepresentation().trim().startsWith("ClassifierType \".\" ClassifierType -> ClassifierType")) {
				// the QualifiedType is only linked, if it is not part of an EnclosedType
				if (isInSuperTypeDeclaration) {
					linker.addSuperTypeName((Vertex) #$#);
				} else {
					linker.addTypeName((Vertex) #$#);
				}
			}
		}
	#
	
	%% the name of a classifier type 
	rule #$name = "";#
		(
			PackageName
			"."
			#$name = $name.concat($0).concat(".");#
		)?
		Id #$ = $name.concat(lexem($1));#
		-> PlainClassifierType

    %% TypeArg
    rule Type                         -> TypeArg #
		$ = SimpleArgument();
		HasSimpleArgumentType($, $0);
	#
    rule #$ = WildcardArgument();#
		"?"
		(
			UpperWildcardBound #HasUpperBound($, $0);#
			| (LowerWildcardBound #HasLowerBound($, $0);#)
		)? -> TypeArg
    rule "extends" Type     -> UpperWildcardBound #$ = $1;#
    rule "super"   Type     -> LowerWildcardBound #$ = $1;#

    %% TypeParam
    rule #$ = TypeParameterDeclaration();#	
		Id #
			$.name = {return qualifiedNamePrefix;}.concat(".").concat(lexem($0));
			$identifier = name2Identifier.use(lexem($0));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($0);
					name2Identifier.declare(lexem($0), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
				}
			}
			HasTypeParameterName($, $identifier);
			name2TypeParameter.declare(lexem($0), $);
		#
		("extends" {Type #HasTypeParameterUpperBound($, $0);# "&"}+ )?  -> TypeParam
	
	context-free priorities
		ClassifierType "." ClassifierType -> ClassifierType {left, avoid}
		<2>> {
			PackageName "." Id             -> ClassifierType
			PackageName "." Id "<" {TypeArg "," }+ ">" -> ClassifierType
		}