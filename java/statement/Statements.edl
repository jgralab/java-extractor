module java/statement/Statements

imports
	java/member/Members %% FieldDeclaration ParamDeclaration VariableDeclaration
	java/type/ClassifierDeclarations %% ClassDeclaration EnumDeclaration
	java/expression/Expressions %% Expression
	java/Identifiers %% Id

symbol tables
	name2Label<Label> %% may not be pushed or popped!!

exports
  sorts Statement Block
  sorts SwitchGroup SwitchLabel CatchClause OpenStatement ClosedStatement

  context-free syntax  
    %% statements
    rule #
			$isLocalVariable = {return isLocalVariable;};
			{isLocalVariable = true;}
		#
		OpenStatement -> Statement #
			$ = $0;
			{isLocalVariable = (Boolean) #$isLocalVariable#;}
		#
	rule #
			$isLocalVariable = {return isLocalVariable;};
			{isLocalVariable = true;}
		#
		ClosedStatement -> Statement #
			$ = $0;
			{isLocalVariable = (Boolean) #$isLocalVariable#;}
		#
  
    %% statements without trailing substatements
	rule Block		-> ClosedStatement #
		$ = Block();
		ContainsBlockStatement($, $0);
	#
	rule #$statements = list();#
		"{"
		Statement #{
				if (#$0# instanceof Vertex) {#
					$statements.add($0);
				#} else {#
					$statements.addAll($0);
				#}
			}# 
		*
		"}" -> Block #$ = $statements;#
	
	rule ";"        -> ClosedStatement #$ = {return utilities.getEmptyStatement(currentElement.getPosition());};#
	
	rule #
			$isLocalVariable = {return isLocalVariable;};
			{isLocalVariable = true;}
		#
		FieldDeclaration -> ClosedStatement #
			{isLocalVariable = (Boolean) #$isLocalVariable#;}
			$ = $0;
		#
	@Symboltable{name2Label}
	rule #
			$isLocalVariable = {return isLocalVariable;};
			{isLocalVariable = false;}
			$qualifiedNamePrefix= {return qualifiedNamePrefix;};
			{qualifiedNamePrefix = "";}
		#
		ClassDeclaration -> ClosedStatement #
		$ = TypeDefinitionStatement();
		ContainsDefinedType($, $0);
		%% a local class has no canonical name
		$0.canonicalName = null;
		{isLocalVariable = (Boolean) #$isLocalVariable#;}
		{qualifiedNamePrefix = (String) #$qualifiedNamePrefix#;}
	#
	
	rule Expression ";"   -> ClosedStatement {avoid} #$ = $0;#
	
	rule #$ = Switch();#
		"switch"
		"(" Expression ")" #ContainsSwitchArgument($, $2);#
		"{" 
		SwitchGroup #$ = $0;# *
		SwitchLabel #{
				if (((Vertex) #$0#).isInstanceOf(getVertexClass("statement.Case"))) {#
					ContainsCase($, $0);
				#} else {#
					ContainsDefaultCase($, $0);
				#}
			}#
		*
		"}" -> ClosedStatement
    rule #
			$ = Switch();
			$isLastLabelDefault = false;
		#
		SwitchLabel #{
				if (((Vertex) #$0#).isInstanceOf(getVertexClass("statement.Case"))) {#
					$isLastLabelDefault = false;
					ContainsCase($, $0);
				#} else {#
					$isLastLabelDefault = true;
					ContainsDefaultCase($, $0);
				#}
			}
				$lastLabel = $0;
			#
		+
		Statement #{
				if ((Boolean) #$isLastLabelDefault#) {#
					ContainsDefaultStatement($lastLabel, $0);
				#} else {#
					ContainsCaseStatement($lastLabel, $0);
				#}
			}#
		+ -> SwitchGroup
    rule "case" Expression ":" -> SwitchLabel #
		$ = Case();
		ContainsCaseCondition($, $1);
	#
    rule "default"   ":" -> SwitchLabel #$ = Default();#
	
	rule #$ = Break();# "break"    Id #BreaksTo($, name2Label.use(lexem($0)));# ? ";"   -> ClosedStatement
	rule #$ = Continue();# "continue" Id #ContinuesAt($, name2Label.use(lexem($0)));# ? ";"   -> ClosedStatement
	rule #$ = Return();# "return"   Expression #ContainsReturnValue($, $0);# ? ";" -> ClosedStatement
	rule "throw"    Expression  ";" -> ClosedStatement #
		$ = Throw();
		ThrowsExceptionCreatedBy($, $1);
	#
	rule #$ = Synchronized();#
		"synchronized" 
		"(" Expression ")" #ContainsMonitor($, $2);#
		Block #ContainsSynchronizedStatement($, $4);#
		-> ClosedStatement
	
    rule #$ = Assert();# 
		"assert" Expression #ContainsAssertCondition($, $1);#
		(
			":"
			Expression #ContainsMessage($, $1);#
		)?
		";" -> ClosedStatement
	
    rule #
			$ = Try();
		#
		"try" Block #
			ContainsTryBlockStatement($, $1);
		#
		CatchClause #ContainsExceptionHandler($, $0);# *
		("finally" Block #ContainsFinallyBlockStatement($, $1);# )?
		-> ClosedStatement
    rule "catch" "(" ParamDeclaration ")" Block -> CatchClause #
		$ = Catch();
		DeclaresCaughtException($, $2);
		ContainsCatchBlockStatement($, $4);
	#
	
	rule Id ":" # 
			$identifier = name2Identifier.use(lexem($0));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($0);
					name2Identifier.declare(lexem($0), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
				}
			}
			$ = Label();
			HasLabelName($, $identifier);
			name2Label.declare(lexem($0), $);
		#
		ClosedStatement -> ClosedStatement #
			ContainsLabelStatement($, $2);
			name2Label.getTop().getMap().remove(lexem($0));
		#
	
    rule "if" "(" Expression ")" ClosedStatement "else" ClosedStatement -> ClosedStatement #
		$ = If();
		ContainsIfCondition($, $2);
		ContainsThen($, $4);
		ContainsElse($, $6);
	#
	
	rule "do" Statement "while" "(" Expression ")" ";" -> ClosedStatement #
		$ = DoWhile();
		ContainsDoWhileBody($, $1);
		ContainsDoWhileCondition($, $4);
	#
	
	rule "while" "(" Expression ")" ClosedStatement -> ClosedStatement #
		$ = While();
		ContainsWhileCondition($, $2);
		ContainsWhileBody($, $4);
	#
	
	rule #$ = TraditionalFor();#
		"for" "("
		(VariableDeclaration | {Expression #lift($0);# ","}*) #ContainsRunVariableInitialization($, $2);#
		";" Expression #ContainsForCondition($, $0);# ? 
		";" {Expression #ContainsIterator($, $0);# ","}*
		")"
		ClosedStatement #ContainsForBody($, $8);#
		-> ClosedStatement
	
    rule "for" "(" ParamDeclaration ":" Expression ")" ClosedStatement -> ClosedStatement #
		$ = ForEach();
		$2 = LocalVariableDeclaration();
		DeclaresRunVariable($, $2);
		ContainsIterableOrArrayDefinition($, $4);
		ContainsForBody($, $6);
	#
	
	%% statements with trailing substatements
	
	rule Id ":" # 
			$identifier = name2Identifier.use(lexem($0));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($0);
					name2Identifier.declare(lexem($0), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
				}
			}
			$ = Label();
			HasLabelName($, $identifier);
			name2Label.declare(lexem($0), $);
		#
		OpenStatement -> OpenStatement #
			ContainsLabelStatement($, $2);
			name2Label.getTop().getMap().remove(lexem($0));
		#
	
	rule "while" "(" Expression ")" OpenStatement -> OpenStatement #
		$ = While();
		ContainsWhileCondition($, $2);
		ContainsWhileBody($, $4);
	#
	
	rule #$ = TraditionalFor();#
		"for" "("
		(VariableDeclaration | {Expression #lift($0);# ","}*) #ContainsRunVariableInitialization($, $2);#
		";" Expression #ContainsForCondition($, $0);# ? 
		";" {Expression #ContainsIterator($, $0);# ","}*
		")"
		OpenStatement #ContainsForBody($, $8);#
		-> OpenStatement

    rule "for" "(" ParamDeclaration ":" Expression ")" OpenStatement -> OpenStatement #
		$ = ForEach();
		$2 = LocalVariableDeclaration();
		DeclaresRunVariable($, $2);
		ContainsIterableOrArrayDefinition($, $4);
		ContainsForBody($, $6);
	#
	
    rule "if" "(" Expression ")" Statement -> OpenStatement #
		$ = If();
		ContainsIfCondition($, $2);
		ContainsThen($, $4);
	#
    rule "if" "(" Expression ")" ClosedStatement "else" OpenStatement -> OpenStatement #
		$ = If();
		ContainsIfCondition($, $2);
		ContainsThen($, $4);
		ContainsElse($, $6);
	#