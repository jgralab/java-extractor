module java/expression/MethodsAndObjectCreations
imports
  java/type/Types %% Type ClassifierType TypeArg PlainClassifierType NonArrayType
  java/Identifiers %% Id
  java/type/ClassifierDeclarations %% ClassifierBody
  java/annotation/Annotations %% Annotation

global actions
	@Before
	pattern _(*) -> Expression #
		$isAmbiguousName = {return isAmbiguousName;};
		{isAmbiguousName = false;}
	#
	
	pattern _(*) -> Expression #{
		isAmbiguousName = (Boolean) #$isAmbiguousName#;
	}#

exports
  sorts Expression
  sorts MethodSpec ArrayInit SubArrayExpression

  context-free syntax
	%% constructor call
	%% duplicate method because of priorities
    rule #
			$ = ConstructorCall();
			$method = MethodInvocation();
			$method.type = MethodInvocationTypes.CONSTRUCTOR;
			InvokesConstructor($, $method);
			{linker.addConstructorName((Vertex) #$method#);}
		#
		"new" ("<" #$typeArg = TypeArgument();#
		{
			TypeArg #{
				if (((Vertex) #$0#).isInstanceOf(getVertexClass("type.specification.SimpleArgument"))) {#
					ContainsSimpleArgument($typeArg, $0);
				#} else {#
					ContainsWildcardArgument($typeArg, $0);
				#}
			}#
			","
		}+ #HasMethodTypeArgument($method, $typeArg);#
		">")?
		ClassifierType #
			$type = $2;
			$identifier = {return utilities.getIdentifierOfConstructorType((Vertex) #$2#);};
			HasInvokedMethodName($method, $identifier);
		#
		"(" {Expression #ContainsCurrentParameter($method, $0);# ","}* ")"
		(
			#
				$isLocalVariable = {return isLocalVariable;};
				{isLocalVariable = false;}
				%% create anonymous class
				$anonymousType = ClassDefinition();
				$currentType = {return currentType;};
				{currentType = (Vertex) #$anonymousType#;}
				$name = null;%%{return "";// TODO create simple name for anonymous class};
				%%$anonymousType.name = $name;
				%%$qName = {return qualifiedNamePrefix + "." + #$name#;//TODO check};
				%%$anonymousType.canonicalName = $qName;
				$qualifiedNamePrefix= {return qualifiedNamePrefix;};
				%%{qualifiedNamePrefix += "." + #$name#;}
				{qualifiedNamePrefix = "";}
			#
			ClassifierBody #
				$identifier = name2Identifier.use($name);
				{
					if (#$identifier# == null) {#
						$identifier = Identifier();
						$identifier.name = $name;
						name2Identifier.declare($name, $identifier);
					#} else {
						getPositionsMap().put((Vertex) #$identifier#, currentElement.getParentApplicationOfDefinedRule().getPosition());
					}
				}
				HasTypeName($anonymousType, $identifier);
				ExtendsClass($anonymousType, $type);%% this could be an Interface, too
				{linker.addAnonymousClass((Vertex) #$anonymousType#);}
				ContainsTypeMember($anonymousType, $0);
				%% create type specification
				$type = QualifiedType();
				$type.fullyQualifiedName = null;%%$qName;
				HasSimpleName($type, $identifier);
				IsDefinedByType($type, $anonymousType);
				%% restore values
				{isLocalVariable = (Boolean) #$isLocalVariable#;} 
				{qualifiedNamePrefix = (String) #$qualifiedNamePrefix#;}
				{currentType = (Vertex) #$currentType#;}
				{linker.registerSpecificType((Vertex) #$anonymousType#);}
			#
		)?
		-> ConstructorSuffix #HasCreatedObjectType($, $type);#
	rule ConstructorSuffix -> Expression #$ = $0;#
    rule Expression "." ConstructorSuffix -> Expression #
			$ = $2;
			ContainsCalledMethod($.get_constructorInvocation(), $0);
		#
	
	%% method call or constructor calls this() (Expliciteconstructor) or super()
	rule MethodSpec #$method = $0;# "(" {Expression #ContainsCurrentParameter($method, $0);# ","}* ")" -> Expression #
		$constructorCall = $method.get_constructorCall();
	{
		if (#$constructorCall# != null) {#
			$ = $constructorCall;
		#} else {#
			$ = $method;
		#}
	}#

	rule #$ = MethodInvocation();# 
		("<" #$typeArg = TypeArgument();#
		{
			TypeArg #{
				if (((Vertex) #$0#).isInstanceOf(getVertexClass("type.specification.SimpleArgument"))) {#
					ContainsSimpleArgument($typeArg, $0);
				#} else {#
					ContainsWildcardArgument($typeArg, $0);
				#}
			}#
			","
		}+ #HasMethodTypeArgument($, $typeArg);#
		">")?
		(
			Id #
				$.type = MethodInvocationTypes.METHOD;
				$name = lexem($0);
				$identifier = name2Identifier.use($name);
				{
					if (#$identifier# == null) {#
						$identifier = Identifier();
						$identifier.name = $name;
						name2Identifier.declare($name, $identifier);
					#} else {
						getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
					}
				}
				HasInvokedMethodName($, $identifier);
				{linker.addMethodName((Vertex) #$#);}
			#
			|"this" #
				$.type = MethodInvocationTypes.EXPLICITCONSTRUCTOR;
				$cons = ConstructorCall();
				InvokesConstructor($cons, $);
				$currentType = {return currentType;};
				$qualifiedType = QualifiedType();
				$qualifiedType.fullyQualifiedName = $currentType.canonicalName;
				$name = $currentType.name;
				$identifier = name2Identifier.use($name);
				{
					if (#$identifier# == null) {#
						$identifier = Identifier();
						$identifier.name = $name;
						name2Identifier.declare($name, $identifier);
					#} else {
						getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
					}
				}
				HasSimpleName($qualifiedType, $identifier);
				HasCreatedObjectType($cons, $qualifiedType);
				{linker.addConstructorName((Vertex) #$#);}
			#
			|("super" #
				$.type = MethodInvocationTypes.SUPERCONSTRUCTOR;
				$cons = ConstructorCall();
				InvokesConstructor($cons, $);
				$currentType = {return currentType;};
				$superType = $currentType.get_superClass();
				{
					if (#$superType# == null) {#
						%% if no explicite super class exists, then use Object
						$superType = QualifiedType();
						$superType.fullyQualifiedName = "java.lang.Object";
						$name = "Object";
						$identifier = name2Identifier.use($name);
						{
							if (#$identifier# == null) {#
								$identifier = Identifier();
								$identifier.name = $name;
								name2Identifier.declare($name, $identifier);
							#} else {
								getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
							}
						}
						HasSimpleName($superType, $identifier);
					#}
				}
				HasCreatedObjectType($cons, $superType);
				{linker.addConstructorName((Vertex) #$#);}
			#)
		) -> MethodSuffix
		
		
	rule MethodSuffix -> MethodSpec #$ = $0;#
	rule #$prefix = null;#
		(
			Type "." #
				$prefix = ClassLiteral();
				RefersToType($prefix, $0);
			#
		)? "super" "." MethodSuffix -> MethodSpec #
		$ = $3;
		{
		if (#$.type# == #MethodInvocationTypes.METHOD#) {#
			$.type = MethodInvocationTypes.SUPERMETHOD;
		#}
		if (#$prefix# != null) {#
			ContainsCalledMethod($, $prefix);
		#}
	}#
	rule #
			$isAmbiguousName = {return isAmbiguousName;};
			{isAmbiguousName = true;}
		# 
		Expression #
			{isAmbiguousName = (Boolean) #$isAmbiguousName#;}
		#
		"." MethodSuffix -> MethodSpec % {avoid} %#
		$ = $2;
		ContainsCalledMethod($, $0);
	#
	
	%% array creation
    rule #$ = ArrayCreation();#
		"new" NonArrayType #
			expression.HasElementType($, $1);
			$dimension = 0;
		#
		(
			"["
			Expression #HasDimensionSize($, $0);# ?
			"]" #$dimension = {return ((Integer) #$dimension#) + 1;};#
		)+ -> SubArrayExpression #$.dimensions = $dimension;#
	rule SubArrayExpression #$ = $0;# ArrayInit #ContainsInitializer($, $0);# ? -> Expression
	rule #$ = ArrayInitializer();# "{" {(Expression|Annotation) #ContainsElement($, $0);# ","}* ","? "}" -> ArrayInit
	rule ArrayInit -> Expression #$ = $0;#
	
  context-free restrictions
	SubArrayExpression -/- [\[]