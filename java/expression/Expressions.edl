module java/expression/Expressions
imports
  java/expression/literals/IntegerLiterals %% IntLiteral
  java/expression/literals/FloatingPointLiterals %% FloatLiteral
  java/expression/literals/BooleanLiterals  %% BoolLiteral
  java/expression/literals/CharacterLiterals  %% CharLiteral
  java/expression/literals/StringLiterals %% StringLiteral
  java/expression/literals/NullLiteral %% NullLiteral
  java/type/Types %% Type ClassifierType
  java/Identifiers %% Id
  java/expression/Operations %% Expression
  java/expression/MethodsAndObjectCreations %% Expression
  java/expression/Priorities

exports
  sorts Expression ArrayAccess SubArrayAccess

  context-free syntax
	rule IntLiteral    -> Expression #$ = {return utilities.getLiteral((String) #lexem($0)#, currentElement.getPosition());};#
    rule FloatLiteral  -> Expression #$ = {return utilities.getLiteral((String) #lexem($0)#, currentElement.getPosition());};#
    rule BoolLiteral   -> Expression #$ = {return utilities.getLiteral((String) #lexem($0)#, currentElement.getPosition());};#
    rule CharLiteral   -> Expression #$ = {return utilities.getLiteral((String) #lexem($0)#, currentElement.getPosition());};#
    rule StringLiteral -> Expression #$ = {return utilities.getLiteral((String) #lexem($0)#, currentElement.getPosition());};#
    rule NullLiteral   -> Expression #$ = {return utilities.getLiteral((String) #lexem($0)#, currentElement.getPosition());};#
	
    rule Type   "." "class" -> Expression #
		$ = ClassLiteral();
		RefersToType($, $0);
	#
	
	rule #$ = ThisConstant();#
		(ClassifierType #ContainsQualifier($, $0);# ".")? "this" -> Expression

	rule "(" Expression ")"          -> Expression #$ = $1;#

    %% todo JFR-30
    rule Expression CondMid Expression -> Expression {right} #
		$ = ConditionalExpression();
		ContainsCondExpCondition($, $0);
		ContainsMatch($, $1);
		ContainsMismatch($, $2);
	#
    rule "?" Expression ":" -> CondMid {bracket} #$ = $1;#
	
	rule FieldAccess -> Expression #$ = $0;#
	
	 %% variable, local field, type parameter, enum constant
    rule Id  -> FieldAccess #
		$ = FieldAccess();
		$name = lexem($0);
		$identifier = name2Identifier.use($name);
		{
			if (#$identifier# == null) {#
				$identifier = Identifier();
				$identifier.name = $name;
				name2Identifier.declare($name, $identifier);
			#} else {
				getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
			}
		}
		HasFieldName($, $identifier);
	#
	
	rule                 Expression "." Id -> FieldAccess #
		$ = FieldAccess();
		$name = lexem($2);
		$identifier = name2Identifier.use($name);
		{
			if (#$identifier# == null) {#
				$identifier = Identifier();
				$identifier.name = $name;
				name2Identifier.declare($name, $identifier);
			#} else {
				getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
			}
		}
		OwnsField($, $0);
		HasFieldName($, $identifier);
	#
    rule             Type "." Id -> FieldAccess {avoid} #
		$ = FieldAccess();
		$name = lexem($2);
		$identifier = name2Identifier.use($name);
		{
			if (#$identifier# == null) {#
				$identifier = Identifier();
				$identifier.name = $name;
				name2Identifier.declare($name, $identifier);
			#} else {
				getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
			}
		}
		$classLiteral = ClassLiteral();
		RefersToType($classLiteral, $0);
		OwnsField($, $classLiteral);
		HasFieldName($, $identifier);
	#
    rule              "super" "." Id -> FieldAccess #
		$ = SuperFieldAccess();
		$name = lexem($2);
		$identifier = name2Identifier.use($name);
		{
			if (#$identifier# == null) {#
				$identifier = Identifier();
				$identifier.name = $name;
				name2Identifier.declare($name, $identifier);
			#} else {
				getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
			}
		}
		HasFieldName($, $identifier);
	#
    rule Type "." "super" "." Id -> FieldAccess #
		$ = SuperFieldAccess();
		$name = lexem($4);
		$identifier = name2Identifier.use($name);
		{
			if (#$identifier# == null) {#
				$identifier = Identifier();
				$identifier.name = $name;
				name2Identifier.declare($name, $identifier);
			#} else {
				getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
			}
		}
		$classLiteral = ClassLiteral();
		RefersToType($classLiteral, $0);
		OwnsField($, $classLiteral);
		HasFieldName($, $identifier);
	#
	
    %% todo: JFR-29
	rule ArrayAccess -> Expression #$ = $0;#
    rule Expression SubArrayAccess -> ArrayAccess #
		$ = ArrayAccess();
		OwnsArray($, $0);
		HasArrayElementIndex($, $1);
	#
	rule "[" Expression #lift($0);#? "]" -> SubArrayAccess #$ = $1;#

  context-free priorities
	Expression SubArrayAccess -> ArrayAccess
	<0>>
	SubArrayExpression ArrayInit? -> Expression,
	
	Expression "." Id -> FieldAccess
	<0>>{
		IntLiteral    -> Expression
		FloatLiteral  -> Expression
		BoolLiteral   -> Expression 
		CharLiteral   -> Expression
		NullLiteral   -> Expression
	}