module java/expression/Operations
imports
  java/expression/Expressions %% Expression ArrayAccess
  java/type/Types %% Type ClassifierType PrimType ArrayType

global actions
	@Before
	pattern _(*) -> Expression #
		$isAmbiguousName = {return isAmbiguousName;};
		{isAmbiguousName = false;}
	#
	
	pattern _(*) -> Expression #{
		isAmbiguousName = (Boolean) #$isAmbiguousName#;
	}#

	pattern _ Expression -> Expression #{
		if (!(Boolean) #$isLiteralPrefix#) {#
			$ = PrefixExpression();
			$.operator = $operator;
			ContainsPrefixedRightHandSide($, $1);
		#}
	}#
	
	pattern Expression _ -> Expression #
		$ = PostfixExpression();
		$.operator = $operator;
		ContainsPostfixedLeftHandSide($, $0);
	#
	
	pattern Expression _ Expression -> Expression #
		$ = InfixExpression();
		$.operator = $operator;
		ContainsInfixedLeftHandSide($, $0);
		ContainsInfixedRightHandSide($, $2);
	#
	
	pattern LHS _ Expression -> Expression #
		$ = InfixExpression();
		$.operator = $operator;
		ContainsInfixedLeftHandSide($, $0);
		ContainsInfixedRightHandSide($, $2);
	#

exports
  sorts Expression
  sorts CondMid LHS

  context-free syntax
	rule #$operator = PrefixOperators.PLUS;# "+" Expression #$isLiteralPrefix = false;# -> Expression 
    rule #$operator = PrefixOperators.MINUS;# "-" Expression #
			$isLiteralPrefix = {return (((Vertex) #$1#).isInstanceOf(getVertexClass("expression.LongConstant"))
					|| ((Vertex) #$1#).isInstanceOf(getVertexClass("expression.IntegerConstant"))
					|| ((Vertex) #$1#).isInstanceOf(getVertexClass("expression.FloatConstant"))
					|| ((Vertex) #$1#).isInstanceOf(getVertexClass("expression.DoubleConstant")))
					&& !((String) #lexem($1)#).startsWith("-");};
		#
		 -> Expression #{
			if ((Boolean) #$isLiteralPrefix#) {#
				$ = {return utilities.applyMinus((Vertex) #$1#);};
			#}
		 }#

    rule #$operator = PrefixOperators.INCREMENT;# "++" #$isLiteralPrefix = false;# Expression -> Expression
    rule #$operator = PrefixOperators.DECREMENT;# "--" #$isLiteralPrefix = false;# Expression -> Expression

    rule #$operator = PrefixOperators.BITWISECOMPLEMENT;# "~" Expression #$isLiteralPrefix = false;# -> Expression
    rule #$operator = PrefixOperators.NOT;# "!" Expression #$isLiteralPrefix = false;# -> Expression

	%% splitting in three rules is required because of priorities
    rule "(" PrimType ")" Expression -> Expression #
		$ = BuiltInCast();
		CastsToBuiltInType($, $1);
		CastsValueOf($, $3);
	#
    rule "(" ArrayType ")" Expression -> Expression #
		$ = ClassCast();
		CastsToType($, $1);
		CastsValueOf($, $3);
	#
    rule "(" ClassifierType ")" Expression -> Expression #
		$ = ClassCast();
		CastsToType($, $1);
		CastsValueOf($, $3);
	#
	
    rule #$operator = PostfixOperators.INCREMENT;# Expression "++" -> Expression
    rule #$operator = PostfixOperators.DECREMENT;# Expression "--" -> Expression
	
	rule Expression "instanceof" Type -> Expression #
		$rhs = ClassLiteral();
		RefersToType($rhs, $2);
		$ = InfixExpression();
		$.operator = InfixOperators.INSTANCEOF;
		ContainsInfixedLeftHandSide($, $0);
		ContainsInfixedRightHandSide($, $rhs);
	#

    rule #$operator = InfixOperators.MULTIPLICATION;# Expression "*"   Expression -> Expression  {left}
    rule #$operator = InfixOperators.DIVISION;# Expression "/"   Expression -> Expression  {left}
    rule #$operator = InfixOperators.MODULO;# Expression "%"   Expression -> Expression  {left}

    rule #$operator = InfixOperators.PLUS;# Expression "+"   Expression -> Expression  {left}
    rule #$operator = InfixOperators.MINUS;# Expression "-"   Expression -> Expression  {left}

    rule #$operator = InfixOperators.LEFTSHIFT;# Expression "<<"  Expression -> Expression  {left}
    rule #$operator = InfixOperators.RIGHTSHIFT;# Expression ">>"  Expression -> Expression  {left}
    rule #$operator = InfixOperators.UNSIGNEDRIGHTSHIFT;# Expression ">>>" Expression -> Expression  {left}

    rule #$operator = InfixOperators.LESS;# Expression "<"   Expression -> Expression  {left}
    rule #$operator = InfixOperators.GREATER;# Expression ">"   Expression -> Expression  {left}
    rule #$operator = InfixOperators.LESSEQUALS;# Expression "<="  Expression -> Expression  {left}
    rule #$operator = InfixOperators.GREATEREQUALS;# Expression ">="  Expression -> Expression  {left}
    rule #$operator = InfixOperators.EQUALS;# Expression "=="  Expression -> Expression  {left}
    rule #$operator = InfixOperators.UNEQUALS;# Expression "!="  Expression -> Expression  {left}

    rule #$operator = InfixOperators.SHORTCIRCUITAND;# Expression "&&"  Expression -> Expression  {left}
    rule #$operator = InfixOperators.SHORTCIRCUITOR;# Expression "||"  Expression -> Expression  {left}

    rule #$operator = InfixOperators.AND;# Expression "&" Expression -> Expression {left}
    rule #$operator = InfixOperators.XOR;# Expression "^" Expression -> Expression {left}
    rule #$operator = InfixOperators.OR;# Expression "|" Expression -> Expression {left}
	
	rule #$operator = InfixOperators.ASSIGNMENT;# LHS "="    Expression -> Expression
    rule #$operator = InfixOperators.MULTIPLICATIONASSIGNMENT;# LHS "*="   Expression -> Expression
    rule #$operator = InfixOperators.DIVISIONASSIGNMENT;# LHS "/="   Expression -> Expression
    rule #$operator = InfixOperators.MODULOASSIGNMENT;# LHS "%="   Expression -> Expression
    rule #$operator = InfixOperators.PLUSASSIGNMENT;# LHS "+="   Expression -> Expression
    rule #$operator = InfixOperators.MINUSASSIGNMENT;# LHS "-="   Expression -> Expression
    rule #$operator = InfixOperators.LEFTSHIFTASSIGNMENT;# LHS "<<="  Expression -> Expression
    rule #$operator = InfixOperators.RIGHTSHIFTASSIGNMENT;# LHS ">>="  Expression -> Expression
    rule #$operator = InfixOperators.UNSIGNEDRIGHTSHIFTASSIGNMENT;# LHS ">>>=" Expression -> Expression
    rule #$operator = InfixOperators.ANDASSIGNMENT;# LHS "&="   Expression -> Expression
    rule #$operator = InfixOperators.XORASSIGNMENT;# LHS "^="   Expression -> Expression
    rule #$operator = InfixOperators.ORASSIGNMENT;# LHS "|="   Expression -> Expression

    rule FieldAccess -> LHS #$ = $0;#
    rule ArrayAccess -> LHS #$ = $0;#
	rule "(" LHS ")" -> LHS #$ = $1;# %% javac accepts this
	
	lexical restrictions
		"+" -/- [\+]
		"-" -/- [\-]
		"/" -/- [\/]