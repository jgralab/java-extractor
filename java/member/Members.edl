module java/member/Members
imports
  java/member/Modifiers         %% Modifier
  java/Identifiers       %% Id
  java/type/Types             %% Type, TypeParam
  java/statement/Statements %% Statement
  java/expression/Expressions    %% Expression
  java/type/ClassifierDeclarations %% ClassifierBody
  java/annotation/Annotations %% Annotation
 
user code {
	private boolean isLocalVariable = false;
}

exports
  sorts Member AnnotationElementDecl EnumConstants VariableDeclaration

  context-free syntax

    %% EnumConstant
	rule {EnumConst #lift($0);# ","}* ","? -> EnumConstants #$ = $0;#
    rule #$ = EnumConstant();# 
		Annotation #HasVariableAnnotation($, $0);#* 
		Id #
			$identifier = name2Identifier.use(lexem($1));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($1);
					name2Identifier.declare(lexem($1), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(2).getPosition());
				}
			}
			HasVariableName($, $identifier);
			name2VariableDeclaration.declare($identifier.name, $);
		#
		("(" {Expression #ContainsEnumConstantArgument($, $0);# ","}* ")")?
		(
			#name2VariableDeclaration.push();#
			ClassifierBody #
				ContainsEnumMember($, $0);
				name2VariableDeclaration.pop();
			#
		)?      -> EnumConst

    %% AnnotationElementDecl
    rule #$ = AnnotationField();#
		(
			Modifier #HasVariableModifier($, $0);#
			| (Annotation #HasVariableAnnotation($, $0);#)
		)*
        Type #
			$type = $1;
			$dimension = {return utilities.calculateDimensions((Vertex) #$1#);};
		#
		Id #
			$identifier = name2Identifier.use(lexem($2));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($2);
					name2Identifier.declare(lexem($2), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(4).getPosition());
				}
			}
			name2VariableDeclaration.declare($identifier.name, $);
		#
		(
			"[" "]" #
				$dimension = {return ((Integer) #$dimension#) + 1;};
				$newType = ArrayType();
				$newType.dimensions = $dimension;
				type.specification.HasElementType($newType, $type);
				$type = $newType;
			#
		)* #
			HasVariableType($, $type);
			HasVariableName($, $identifier);
		#
         "(" ")" AnnoInitializer #ContainsDefaultValue($, $0);# ? ";" -> AnnotationElementDecl

    rule "default" Expression|Annotation          -> AnnoInitializer #$ = $1;#

    %% FieldDeclaration
    rule #$modAndAnno = list();# 
		(
			Modifier
			| Annotation
			#$modAndAnno.add($0);#
		)*
        Type #
			$baseType = $1;
			$baseDimension = {return utilities.calculateDimensions((Vertex) #$1#);};
			$ = list();
		#
        {
			(
				Id #
					$type = $baseType;
					$dimension = $baseDimension;
				#
				(
					"[" "]" #
						$dimension = {return ((Integer) #$dimension#) + 1;};
						$newType = ArrayType();
						$newType.dimensions = $dimension;
						type.specification.HasElementType($newType, $type);
						$type = $newType;
					#
				)* #
					{
						if (isLocalVariable) {#
							$field = LocalVariableDeclaration();
						#} else {#
							$field = Field();
						#}
					}
					$.add($field);
					{utilities.createModifiersForVariableDeclaration(#$field#, #$modAndAnno#);}
					HasVariableType($field, $type);
					$identifier = name2Identifier.use(lexem($0));
					{
						if (#$identifier# == null) {#
							$identifier = Identifier();
							$identifier.name = lexem($0);
							name2Identifier.declare(lexem($0), $identifier);
						#} else {
							getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(0).getPosition());
						}
					}
					HasVariableName($field, $identifier);
					name2VariableDeclaration.declare($identifier.name, $field);
				#
				Initializer #ContainsVariableInitializer($field, $0);#?
			) 
			","
		}+
		 -> VariableDeclaration
	rule VariableDeclaration
          ";"
         -> FieldDeclaration #$ = $0;#
    rule FieldDeclaration -> Member #$ = $0;#
	
    rule "=" Expression                   -> Initializer #$ = $1;#

    %% ParamDeclaration
    rule #$ = ParameterDeclaration();#
		(
			Modifier #HasVariableModifier($, $0);#
			| (Annotation #HasVariableAnnotation($, $0);#)
		)*
        Type #
			$type = $1;
			$dimension = {return utilities.calculateDimensions((Vertex) #$1#);};
		#
		 "..." #$ = VariableLengthDeclaration();# ?
		Id #
			$identifier = name2Identifier.use(lexem($3));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($3);
					name2Identifier.declare(lexem($3), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(6).getPosition());
				}
			}
			name2VariableDeclaration.declare($identifier.name, $);
		#
		(
			"[" "]" #
				$dimension = {return ((Integer) #$dimension#) + 1;};
				$newType = ArrayType();
				$newType.dimensions = $dimension;
				type.specification.HasElementType($newType, $type);
				$type = $newType;
			#
		)* #
			HasVariableType($, $type);
			HasVariableName($, $identifier);
		#
         -> ParamDeclaration

    %% MethodDeclaration
	@Symboltable{name2TypeParameter,name2VariableDeclaration}
    rule #$ = MethodDefinition();# 
		(
			Modifier #HasMethodModifier($, $0);#
			| (Annotation #HasMemberAnnotation($, $0);#)
		)*
        ("<" {TypeParam #DeclaresMethodTypeParameter($, $0);# ","}+ #{utilities.correctTypeParameterUsage((SymbolTableStack) #name2TypeParameter#, (Vertex) #$#);}# ">")?
        Type  #
			$type = $2;
			$dimension = {return utilities.calculateDimensions((Vertex) #$2#);};
		#
		Id #
			$identifier = name2Identifier.use(lexem($3));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($3);
					name2Identifier.declare(lexem($3), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(6).getPosition());
				}
			}
		#
        "(" {ParamDeclaration #lift($0);# ","}* ")"
		(
			"[" "]" #
				$dimension = {return ((Integer) #$dimension#) + 1;};
				$newType = ArrayType();
				$newType.dimensions = $dimension;
				type.specification.HasElementType($newType, $type);
				$type = $newType;
			#
		)* #
			HasReturnType($, $type);
			HasMethodName($, $identifier);
			DeclaresMethodParameter($, $5);
		#
        ("throws" {Type #ThrowsMethodException($, $0);# ","}+)?
        (("{" Statement #ContainsMethodBodyStatement($, $0);# * "}") | #$ = MethodDeclaration();# ";")
        -> MethodDeclaration
    rule MethodDeclaration -> Member #$ = $0;#

    %% ConstructorDeclaration
	@Symboltable{name2TypeParameter,name2VariableDeclaration}
    rule #$ = ConstructorDefinition();#
		(
			Modifier #HasConstructorModifier($, $0);#
			| (Annotation #HasMemberAnnotation($, $0);#)
		)*
        ("<" {TypeParam #DeclaresConstructorTypeParameter($, $0);# ","}+ #{utilities.correctTypeParameterUsage((SymbolTableStack) #name2TypeParameter#, (Vertex) #$#);}# ">")?
        Id #
			$identifier = name2Identifier.use(lexem($2));
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = lexem($2);
					name2Identifier.declare(lexem($2), $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(4).getPosition());
				}
			}
			HasConstructorName($, $identifier);
		#
        "(" {ParamDeclaration #DeclaresConstructorParameter($, $0);# ","}* ")"
        ("throws" {Type #ThrowsConstructorException($, $0);# ","}+)?
        "{" Statement #ContainsConstructorBodyStatement($, $0);# * "}"
        -> ConstructorDeclaration
    rule ConstructorDeclaration -> Member #$ = $0;# 

    %% StaticInitializer
	@Symboltable{name2VariableDeclaration}
    rule #$ = StaticInitializer();#
		"static" "{" (Statement #ContainsStaticInitializerStatement($, $0);# )* "}"  -> StaticInitializer
    rule StaticInitializer                         -> InitializerBlock #$ = $0;#

    %% InstanceInitializer
	@Symboltable{name2VariableDeclaration}
    rule #$ = InstanceInitializer();#
		"{" (Statement #ContainsInstanceInitializerStatement($, $0);# )* "}" -> InstanceInitializer
    rule InstanceInitializer                       -> InitializerBlock #$ = $0;#
