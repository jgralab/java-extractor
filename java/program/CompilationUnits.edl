module java/program/CompilationUnits

imports
  java/type/ClassifierDeclarations   %% ClassifierDeclaration
  java/annotation/Annotations              %% Annotation
  java/program/Packages                 %% PackageName
  java/type/Types                    %% PlainClassifierType
  java/Identifiers				%% Id

user code {
	private boolean isPackageDeclaration = false;
	
	private String qualifiedNamePrefix = "";
}

global actions
	pattern "import" _(1..4) ";" -> ImportDeclaration #
			$qualifiedName.fullyQualifiedName = $qName;
			$simpleName = {return utilities.extractSimpleName((String) #$qName#);};
			$identifier = name2Identifier.use($simpleName);
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = $simpleName;
					name2Identifier.declare($simpleName, $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild((Integer) #$idIndex#).getPosition());
				}
			}
			HasSimpleName($qualifiedName, $identifier);
	#

exports
  sorts CompilationUnit

  context-free syntax
    rule #
			$program = {return utilities.getProgram(currentElement.getPosition());};
			$translationUnit = TranslationUnit();
			$translationUnit.name = file();
			ConsistsOf($program, $translationUnit);
			%% create default packege if it does not exist
			$currentPackage = qName2Package.use("");
			{
				if (#$currentPackage# == null) {#
						$currentPackage = JavaPackage();
						$currentPackage.fullyQualifiedName = "";
						qName2Package.declare("", $currentPackage);
						ContainsDefaultPackage($program, $currentPackage);
				#}
			}
		#
		(
			#{isPackageDeclaration = true;}#
			PackageDeclaration #
				{isPackageDeclaration = false;}
				DeclaresExternalDeclaration($translationUnit, $0);
				$currentPackage = qName2Package.use($0.get_qualifiedName().fullyQualifiedName);
			#
		 )?
		 #
			ContainsTranslationUnit($currentPackage, $translationUnit);
		 #
		(ImportDeclaration #DeclaresExternalDeclaration($translationUnit, $0);# | ";")*
		(ClassifierDeclaration #DeclaresExternalDeclaration($translationUnit, $0);# ";"*)* -> CompilationUnit #
			$translationUnit.lengthOfFile = length($);
			$ = $program;
		#
	
    rule #$ = PackageDefinition();#
		Annotation #HasPackageAnnotation($, $0);# *
		"package"
		PackageName #
			$qualifiedName = QualifiedName();
			$qualifiedName.fullyQualifiedName = $2;
			HasPackageName($, $qualifiedName);
			$simpleName = {return utilities.extractSimpleName((String) #$2#);};
			$identifier = name2Identifier.use($simpleName);
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = $simpleName;
					name2Identifier.declare($simpleName, $identifier);
				#}
				qualifiedNamePrefix = #$2#.toString();
			}
			HasSimpleName($qualifiedName, $identifier);
		#
		";" -> PackageDeclaration
	
    rule "import" PlainClassifierType ";" #
			$qName = $1;
			$ = TypeImportDefinition();
			$qualifiedName = QualifiedType();
			$idIndex = 2;
		# 
		-> ImportDeclaration #
			ImportsType($, $qualifiedName);
			{
			 if (mode == Mode.LAZY) {
				utilities.addImportedType((Vertex) #$qualifiedName#);
			 } else {#
				$importedType = {return utilities.resolveQualifiedType(currentElement, (SymbolTableStack) #qName2Type#, (SymbolTableStack) #name2Identifier#, (String) #$qName#);};
				IsDefinedByType($qualifiedName, $importedType);
			 #}
			}
		#
    rule "import" PackageName "." "*" ";" #
			$qName = $1;
			$ = PackageImportDefinition();
			$qualifiedName = QualifiedName();
			$idIndex = 2;
		# 
		-> ImportDeclaration #
			ImportsType($, $qualifiedName);
		#
    rule "import" "static" PlainClassifierType "." Id ";" #
			$qName = $2;
			$ = StaticImportDefinition();
			$qualifiedName = QualifiedType();
			$idIndex = 4;
		# -> ImportDeclaration #
			ImportsType($, $qualifiedName);
			$simpleName = lexem($4);
			$identifier = name2Identifier.use($simpleName);
			{
				if (#$identifier# == null) {#
					$identifier = Identifier();
					$identifier.name = $simpleName;
					name2Identifier.declare($simpleName, $identifier);
				#} else {
					getPositionsMap().put((Vertex) #$identifier#, currentElement.getChild(8).getPosition());
				}
			}
			ImportsStaticMember($, $identifier);
		#
    rule "import" "static" PlainClassifierType "." "*" ";" #
			$qName = $2;
			$ = StaticImportDefinition();
			$qualifiedName = QualifiedType();
			$idIndex = 4;
		# -> ImportDeclaration #
			ImportsType($, $qualifiedName);
		#
