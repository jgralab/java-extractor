module java/Main
imports
	java/program/CompilationUnits %% CompilationUnit
	java/WhiteSpace
	java/Comments
schema de.uni_koblenz.jgralab.java_extractor.schema.Java5Schema
import declarations
	java.io.IOException;
	org.apache.commons.cli.CommandLine;
	org.apache.commons.cli.Option;
	de.uni_koblenz.jgralab.java_extractor.utilities.SemanticActionUtilities;
symbol tables
	qName2Package<JavaPackage>
	name2Identifier<Identifier>
	name2TypeParameter<TypeParameterDeclaration> %% uses simple names as keys
	name2VariableDeclaration<VariableDeclaration>
	qName2Type<Type>
user code {

	public static enum Mode{
		LAZY, EAGER, COMPLETE;
	}
	
	private Mode mode;

	private String programName;
	
	private boolean noComment; 
	
	static {
		Option name = new Option("n", "name", true,
				"(optional): defines the name of the parsed program."
				+ " The default value is \"" + SemanticActionUtilities.DEFAULT_PROGRAM_NAME +"\".");
		name.setRequired(false);
		name.setArgName("name");
		GraphBuilderBaseImpl.furtherCommandLineOptions.add(name);
		
		Option lazy = new Option("l", "lazy", false,
				"(optional): Only the fields, methods, and types are linked, which are currently parsed."
				+ " No reflection is done to identify used types."
				+ " Expressions such as a.b.c which cannot be determined exactly are represented by a vertex of type expression.UnknownExpression."
				+ " This is the default case.");
		lazy.setRequired(false);
		GraphBuilderBaseImpl.furtherCommandLineOptions.add(lazy);
		
		Option eager = new Option("e", "eager", false,
				"(optional): In this mode, fields, methods and type which cannot be identified in the LAZY mode are identified via reflection."
				+ "This requires that all used types are added to the CLASSPATH."
				+ "Only the fields, methods and types which are used directly or indirectly in the parsed source code is represented.");
		eager.setRequired(false);
		GraphBuilderBaseImpl.furtherCommandLineOptions.add(eager);
		
		Option complete = new Option("c", "complete", false,
				"(optional): This mode extends the EAGER mode by adding all fields, method signaturs, and extended or implemented types of directly or indirectly used types even if these members and types are not used in the parsed source code.");
		complete.setRequired(false);
		GraphBuilderBaseImpl.furtherCommandLineOptions.add(complete);
		
		Option noComment = new Option("no_comments", false,
				"(optional): If set, no comments are created.");
		noComment.setRequired(false);
		GraphBuilderBaseImpl.furtherCommandLineOptions.add(noComment);
	}

	@Override
	protected void processFurtherCommandLineArguments(CommandLine commandLine) {
		String name = SemanticActionUtilities.DEFAULT_PROGRAM_NAME;
		if (commandLine.hasOption("n")) {
			name = commandLine.getOptionValue("n");
		}
		programName = name;
		
		mode = Mode.LAZY;
		if (commandLine.hasOption("e")) {
			mode = Mode.EAGER;
		}
		if (commandLine.hasOption("c")) {
			mode = Mode.COMPLETE;
		}
		
		noComment = commandLine.hasOption("no_comments");
	}
	
	private SemanticActionUtilities utilities = new SemanticActionUtilities(this);

	@Override
	protected String readInput(String inputFile, String encoding) throws IOException {
		return utilities.readInput(inputFile, encoding);
	}
	
	@Override
	protected void finalize() {
		try {
			getGraph().save("output.tg");
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		de.uni_koblenz.jgralab.utilities.tg2dot.Tg2Dot.main(new String[] { "-g", "output.tg", "-o", "output.png", "-t", "png", "-i", "-e" });
	
		reset();
	}
	
	private void reset() {
		GraphBuilderBaseImpl.furtherCommandLineOptions = new java.util.ArrayList<Option>();
	}
}
default values
	AttributedEdge.column = column(omega);
	AttributedEdge.length = length(omega);
	AttributedEdge.line = line(omega);
	AttributedEdge.offset = offset(omega);
exports
	context-free start-symbols CompilationUnit #
		%% HasComment($0, getSuffixWhitespace());
		{utilities.setProgramName(programName);}
	#